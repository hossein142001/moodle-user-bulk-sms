<?php

/**
 *  A class used to display data resulted from a mySQL query in an accessible way for the end-user
 *
 *  Some of the highlights:
 *
 *      -   the class executes a given SQL query and generates a template driven HTML code that displays the query results.
 *      -   automatically provides means of navigation trough pages and lets user decide how many rows to be displayed on each page
 *      -   automatically let user sort by available columns - or you can restrict this feature for specific columns
 *      -   if requested, it can automatically display a "selector" column - a column to let users mark specific rows
 *          as selected
 *      -   you set what columns from the query result to be displayed
 *      -   you can alter the content of a column's fields on the fly by creating callback functions
 *      -   you can add JavaScript actions for when user clicks on displayed rows or on specific column's cells
 *      -   you can extend the functionality of the data grid by adding custom columns - columns whose content is not
 *          generated by the query but added by you - you can add any HTML and/or JavaScript to perform any action
 *      - everything is template driven
 *      - multi-language support
 *
 *  See the manual for more info.
 *
 *  This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivs 2.5 License.
 *  To view a copy of this license, visit {@link http://creativecommons.org/licenses/by-nc-nd/2.5/} or send a letter to
 *  Creative Commons, 543 Howard Street, 5th Floor, San Francisco, California, 94105, USA.
 *
 *  For more resources visit {@link http://stefangabos.blogspot.com}
 *
 *  @name       dataGrid
 *  @package    dataGrid
 *  @version    1.01 BETA (last revision: August 18, 2006)
 *  @author     Stefan Gabos <ix@nivelzero.ro>
 *  @copyright  (c) 2006 Stefan Gabos
 *  @example    example1.php
 *  @example    example2.php
 *  @example    example3.php
 *  @example    example4.php
 */
 
//error_reporting(E_ALL);

class dataGrid
{

	/**
     *  Tells that show row download Excel or no
     *
     *  default is false
     *
     *  @var   boolean
     */
	var $ExcelView=false;
	
	/**
     *  Tells the titel of row download Excel
     *
     *  default is ''
     *
     *  @var   string
     */
	var $TitelExcel='';
	
    /**
     *  Tells that show row number in current grid or no
     *
     *  default is TRUE
     *
     *  @var   boolean
     */
    var $showRowNumber=true;
    

    /**
     *  Tells weather or not a navigation tab should be displayed at the top of the table
     *
     *  default is TRUE
     *
     *  @var   boolean
     */
    var $showTopNavigation;
    
    /**
     *  Tells weather or not a navigation tab should be displayed at the bottom of the table
     *
     *  default is TRUE
     *
     *  @var   boolean
     */
    var $showBottomNavigation;
    
    /**
     *  The page to starts showing records from.
     *
     *  default is 1
     *
     *  @var   integer
     */
    var $defaultPage;
    
    /**
     *  Tells weather or not the custom tab should be displayed at the top of the table (underneath the top navigation tab)
     *
     *  Use {@link addToCustomTab} method to add items to the cutom tab
     *
     *  default is TRUE
     *
     *  @var   boolean
     */
    var $showTopCustomTab;
    
    /**
     *  Tells weather or not the custom tab should be displayed at the bottom of the table (above the bottom navigation tab)
     *
     *  Use {@link addToCustomTab} method to add items to the cutom tab
     *
     *  default is TRUE
     *
     *  @var   boolean
     */
    var $showBottomCustomTab;
    
    /**
     *  The maximum number of pages to be shown at once in the navigation tab
     *
     *  default is 10
     *
     *  @var   integer
     */
    var $maxNavigationPages;
    
    /**
     *  The selected page from which to start scrolling the pages in the navigation tab
     *  (i.e suppose you have 20 pages. at first, pages from 1 through 10 are shown in the navigation tab
     *  (if $maxNavigationPages is set to 10) but when you click on page 7 then pages from 2 to 12 will
     *  be shown in the navigation tab - that is, if $scrollNavigationPagesFromPage is set to 5)
     *
     *  default is 5
     *
     *  @var   integer
     */
    var $scrollNavigationPagesFromPage;
    
    /**
     *  The number of rows to be displayed on a single page
     *
     *  default is 15
     *
     *  @var   integer
     */
    var $rowsOnPage;
    
    /**
     *  Array of items to be shown in "records on page" select box in the navigation tab
     *
     *  default is array(5, 10, 15, 20, 25, 50, 100)
     *
     */
     var $recordsOnPageArray;
    
    /**
     *  Language file to use
     *
     *  default is "english.php"
     *
     *  @var   string
     */
    var $languageFile;
    
    /**
     *  Template folder to use
     *  Note that only the folder of the template you wish to use needs to be specified. Inside the folder
     *  you <b>must</b> have the <b>template.xtpl</b> file which will be automatically used
     *
     *  default is "default"
     *
     *  @var   string
     */
    var $template;
    
    /**
     * The form name is automatically generated every time.
     *
     *  Read this property to find out what is form's generated name
     *
     *  <b>this is a read-only property</b>
     */
    var $formName;
    
    /**
     *  in case of an error read this property's value to find out what went wrong
     *
     *  <b>this is a read-only property</b>
     *
     *  possible error values are:
     *
     *      - 1:  database connection error
     *      - 2:  language file could not be found
     *      - 3:  xtemplate class could not be found
     *
     *  @var    integer
     */
    var $error;
    
    /**
     *  Initializes the grid
     *
     *  @param  string  $query  the mySQL SELECT query to be used to generate grid data.
     *
     *                          <b>You must not use ORDER BY and LIMIT statements in it as they are appended automatically!</b>
     *
     *  @param  string  $db     (optional) a reference to an instantiated "zebra php framework database layer" object.
     *                          you should use this approach for logging and debugging purposes but the class will work
     *                          even if you don't specify this reference. in this case the class <b>will assume that there
     *                          is already a connection to a mySQL database</b>
     *
     *  @return void
     */
	 var $ExtraInput;
	 var $javaScriptCode;
	 var $languageStrings;
	 var $RowStyleClassFunction='';
	 var $ShowSqlError = false;
	 
    function dataGrid($query, $db = "")
    {
        global $db;
        // default values to properties
		$this->ExtraInput='';
        $this->showTopNavigation = true;
        $this->showBottomNavigation = true;
        $this->defaultPage = 1;
        $this->showTopCustomTab = true;
        $this->showBottomCustomTab = true;
        $this->maxNavigationPages = 10;
        $this->scrollNavigationPagesFromPage = 5;
        $this->rowsOnPage = 50;
        $this->recordsOnPageArray = array(5, 10, 15, 20, 25, 50, 100);
        $this->languageFile = "english.php";
        $this->template = "default";
        $this->formName = "";
        $this->error = "";
		$this->javaScriptCode = "";
        // get the absolute path of the class. any further includes rely on this
        // and (on a windows machine) replace \ with /
        $this->absolutePath = preg_replace("/\\\/", "/", dirname(__FILE__));
        

		// if the language file exists
		if (file_exists($this->absolutePath."/languages/".$this->languageFile)) {

			// include the language file
			require_once $this->absolutePath."/languages/".$this->languageFile;

		// if the language file does not exists
		} else {

			// save the error level and stop the execution of the script
			$this->error = 2;
			return false;

		}

        // get the relative path of the class. ( by removing $_SERVER["DOCUMENT_ROOT"] from the it)
        // any HTML refferences (to scripts, to stylesheets) in the template file should rely on this
        $this->relativePath = preg_replace("/".preg_replace("/\//", "\/", $_SERVER["DOCUMENT_ROOT"])."/i", "", $this->absolutePath);

        // if $db is specified and is an object and is a "database" object
        if (@is_object($db) ) {
            // set the dbRefference property
            $this->dbRefference = $db;
        }

        // set the query property
        $this->query = $query;
        
        // define an array to hold the column titles specified by the user
        $this->columnsToShow = array();
        
        // define an array to hold the available column titles resulted from the execution of the query
        $this->availableColumns = array();
        
        // define an array to hold the items in the custom tab
        $this->customTabItems = array();
        
        // generate an 8 char long random name to use as form name
        $this->formName = "";
        for ($i=0;$i<8;$i++) {
            $this->formName .= chr(rand(97,122));
        }
        
        //add row number colomn for grid
        $this->showCustomColumn("_Row_Number_Of_Page", $this->languageStrings["strLang_row_number"]);
        $this->disableSorting("_Row_Number_Of_Page");
        $this->setFieldHTMLProperties("_Row_Number_Of_Page", "align=center style='width:1%'");
        
        
    }
    
    function SetRowStyleClassFunctionName($Function_Name){
    	$this->RowStyleClassFunction=$Function_Name;
    }
    
    /**
     *  Specifies Show Row Number or no
     *
     *  @param  boolean      $value         if be true then show Row Number Column else remove it
     *
     *  @return void
     */
    function showRowNumberColumn($value)
    {
    
        // adds column to the array of columns specified by the user
        $this->showRowNumber=$value;
        
    }
    
    /**
     *  Specifies a column from the query result to be shown (none are displayed by default)
     *
     *  @param  string      $columnName         name of an existing column from the query result to be displayed
     *
     *                                          <b>note that all methods that require you to specify the "identifier
     *                                          name of the column" as parameter refer to this property!</b>
     *
     *  @param  string      $title              (optional) text to be displayed instead of the column name
     *
     *  @return void
     */
    function showColumn($columnName, $title = "")
    {
    
        // adds column to the array of columns specified by the user
        $this->columnsToShow[$columnName] = array("name"=>($title == "" ? $columnName : $title), "disableSort"=>false);
        
    }
    
    /**
     *  Specifies a custom column to be shown
     *
     *  A custom column is a column whos data is not generated by the query
     *  The content of a custom column is specified by using the {@link setCallBackFunction} method
     *
     *  @param  string      $columnName         an identifier name for the column
     *
     *                                          <b>note that all methods that require you to specify the "identifier
     *                                          name of the column" as parameter refer to this property!</b>
     *
     *  @param  string      $title              (optional) text to be displayed instead of the column name
     *
     *  @return void
     */
    function showCustomColumn($columnName, $title = "")
    {
    
        // adds column to the array of columns specified by the user
        $this->columnsToShow[$columnName] = array("name"=>($title == "" ? $columnName : $title), "custom"=>true);
        
    }
    
    /**
     *  Enables a "selector" column - a column with checkboxes enabling the user to mark specific rows as selected
     *
     *  @param  string  $columnName     string to be displayed as column title
     *
     *  @param  string  $controlName    a unique name to identify the checkbox controls array
     *
     *  @param  string  $valueSeed      the name of a column returned by the query to be used for adding values for each checkbox
     *
     *                                  <i>this column must be a column that holds data that uniquely identifies data from each row</i>
     *
     *  @return void
     */
    function showSelectorColumn($columnName, $controlName, $valueSeed)
    {
    
        // adds column to the array of columns specified by the user
        $this->showCustomColumn("%dataGrid_selectorColumn%", $columnName);
        
        // unsets any action for this column and blocks any further settings of actions for this column
        $this->unsetActionFunction("%dataGrid_selectorColumn%", true);
        
        // disables sorting for this column
        $this->disableSorting("%dataGrid_selectorColumn%");
        
        // the function that will generate the content for the cell
        $functionString = "
            function _selector(\$data, \$rowData)
            {
                return '
                    <input type=\"checkbox\" style=\"margin:-2px;font-size:0px;\" name=\"".$controlName."[]\" value=\"'.@\$rowData[\"".$valueSeed."\"].'\" class=\"grid-row-selector-checkbox\" onclick=\"if (this.checked == false) {this.parentNode.parentNode.className = this.parentNode.parentNode.id} else {this.parentNode.parentNode.className = \'grid-row-selected\'}\">
                ';
            }
        ";
        
        // registers the function
        eval ($functionString);
        
        // and sets it as the callback function for the column
        $this->setCallBackFunction("%dataGrid_selectorColumn%", "_selector");
        
        // adds the javascript function to handle 'check all', 'uncheck all' and 'invert selection' calls
        $this->addJavaScript("
            function setChkBoxGroupState(formName, controlName, action)
            {
                for (i=0;i<document.forms[formName].elements[controlName].length;i++) {
                    document.forms[formName].elements[controlName][i].checked = (action == 'invert' ? 1 - Math.abs(document.forms[formName].elements[controlName][i].checked) : (action == 'none' ? false : true));
                    if (document.forms[formName].elements[controlName][i].checked == false) {
                        document.forms[formName].elements[controlName][i].parentNode.parentNode.className = document.forms[formName].elements[controlName][i].parentNode.parentNode.id;
                    } else {
                        document.forms[formName].elements[controlName][i].parentNode.parentNode.className = 'grid-row-selected';
                    }
                }
            }
        ");

        // adds the 'check all', 'uncheck all' and 'invert selection' items to the custom tab
        $this->addToCustomTab("[ <span class=\"grid-link\" onclick=\"setChkBoxGroupState('".$this->formName."', '".$controlName."[]', 'all')\">".$this->languageStrings["strLang_checkAll"]."</span> ]");
        $this->addToCustomTab("[ <span class=\"grid-link\" onclick=\"setChkBoxGroupState('".$this->formName."', '".$controlName."[]', 'none')\">".$this->languageStrings["strLang_uncheckAll"]."</span> ]");
        $this->addToCustomTab("[ <span class=\"grid-link\" onclick=\"setChkBoxGroupState('".$this->formName."', '".$controlName."[]', 'invert')\">".$this->languageStrings["strLang_invertSelection"]."</span> ]", 2);

    }
    
    /**
     *  Sets the default column to sort the records by and the direction of sorting
     *
     *  @param  string  $columnName             identifier name of a column previously set with the {@link show} or {
     *                                          @link showCustomColumn} method on which to disable sorting possibility
     *
     *  @param  string  $sortDirection          the direction of sorting. possible values are "ASC" and "DESC"
     *                                          default is "ASC"
     *
     */
    function setDefaultSortColumn($columnName, $sortDirection = "ASC")
    {
        if (!isset($_POST["dataGrid_sortfield"])) {
            $_POST["dataGrid_sortfield"] = $columnName;
            $_POST["dataGrid_sortdirection"] = ($sortDirection == "ASC" ? "" : "DESC");
        }
    }
    
    /**
     *  Adds a HTML block (reffered to as 'item') to the <b>custom tab</b>
     *
     *  @param  string  $htmlBlock  HTML code block to add (this will be further refered to as 'item')
     *
     *  @param  integer $position   (optional) by default items are added from left to right.
     *                              if you want your item in a specific position, specify it here.
     *                              (this is 0 based index - position 0 will be the first item in the custom tab
     *                              therefore the leftmost)
     *
     *  @return void
     *
     */
    function addToCustomTab($htmlBlock, $position = "")
    {
        // count the total items in the $customTabItems array
        $totalItems = count($this->customTabItems);
        // if $position was specified
        if (strlen($position) != 0) {
            // validate $position
            $position =
                // if $position is a negative number
                intval($position) < 0 ?
                // make it 0
                0 :
                // if $position is greater than the available items (remember that this is 0 based index!)
                (intval($position) > ($totalItems - 1) ?
                    // make the $position the last element in the index
                    $position = $totalItems :
                    // if no errors, leave it as it is
                    $position = $position
                );
            // move all elementes in the array, that are greater than $position
            // to the right (thus, making place to inser $item as $position)
            for ($i = $totalItems - 1; $i >= $position; $i--) {
                $this->customTabItems[$i + 1] = $this->customTabItems[$i];
            }
            // add $item at $position
            $this->customTabItems[$position] = $htmlBlock;
        // if $position was not specified
        } else {
            // insert $item into array
            $this->customTabItems[] = $htmlBlock;
        }
        
    }
    
    /**
     *  Disables sorting possibility on a column (by default all columns are sortable)
     *
     *  This method is also available for custom columns
     *
     *  @param  string  $columnName             identifier name of a column previously set with the {@link show} or {
     *                                          @link showCustomColumn} method on which to disable sorting possibility
     *
     *  @return void
     */
    function disableSorting($columnName)
    {
    
        // sets the sorting property
        $this->columnsToShow[$columnName]["disableSorting"] = true;
        
    }
    
    /**
     *  Enables sorting possibility on a column on which sorting possibility was previously disabled by the
     *  {@link disableSorting} method
     *
     *  @param  string  $columnName             identifier name of a column previously set with the {@link show} or {
     *                                          @link showCustomColumn} method on which to enable sorting possibility
     *
     *  @return void
     */
    function enableSorting($columnName)
    {
    
        // sets the sorting property
        $this->columnsToShow[$columnName]["disableSorting"] = false;
        
    }
    
    /**
     *  Sets HTML properties for a specified column's title.
     *
     *  The properties must be valid HTML markup for the <td> element (or whatever element is used in the template)
     *
     *  @param  string  $columnName         identifier name of a column previously set with the {@link show} or {
     *                                      @link showCustomColumn} method
     *
     *  @param  string  $HTMLProperties     HTML properties
     *
     *  @return void
     */
    function setTitleHTMLProperties($columnName, $HTMLProperties)
    {
    
        // sets HTML properties
        $this->columnsToShow[$columnName]["titleHTMLProperties"] = $HTMLProperties;
        
    }
    
    /**
     *  Sets HTML properties for a specified column's fields.
     *
     *  The properties must be valid HTML markup for the <td> element (or whatever element you are using in the template)
     *
     *  @param  string  $columnName         identifier name of a column previously set with the {@link show} or {
     *                                      @link showCustomColumn} method
     *
     *  @param  string  $HTMLProperties     HTML properties
     *
     *  @return void
     */
    function setFieldHTMLProperties($columnName, $HTMLProperties)
    {
    
        // sets HTML properties
        $this->columnsToShow[$columnName]["fieldHTMLProperties"] = $HTMLProperties;
        
    }
    
    /**
     *  Bounds to a column an user defined PHP function that <b>returns</b> the javascript to be run whenever the onclick
     *  event occurs on any of column's fields
     *
     *  <i>The user defined function takes as parameter the value of the field where the onclick event occured and,
     *  optionally, an array containing all the available fields and their respective values for that particular row</i>
     *
     *  By calling this method you will unset any previously set actions by the {@link setRowActionFunction} method for the
     *  specified column
     *
     *  @param  string  $columnName             identifier name of a column previously set with the {@link show} or
     *                                          {@link showCustomColumn} method
     *
     *  @param  string  $actionFunctionName     name of the user defined function
     *
     *  @return void
     */
    function setActionFunction($columnName, $actionFunctionName)
    {
    
        // set the action function for this column's fields
        $this->columnsToShow[$columnName]["action"] = $actionFunctionName;
        
    }
    
    /**
     *  Unsets the action function
     *
     *  By calling this method you will unset any previously set actions by the {@link setRowActionFunction} or the
     *  {@link setActionFunction} methods for the specified column
     *
     *  @param  string  $columnName     identifier name of a column previously set with the {@link show} or {@link showCustomColumn}
     *                                  method for which to unset the action function
     *
     *  @param  string  $block          if set to true, further calling of the {@link setRowActionFunction} function will
     *                                  have no effect on the $columnName column. you can still set an action to this
     *                                  column by calling the {@link setActionFunction} method explicitly for $columnName
     *
     *  @return void
     */
    function unsetActionFunction($columnName, $block = false)
    {
    
        // if block
        if ($block) {
        
            // set a special flag for this column
            $this->columnsToShow[$columnName]["blockAction"] = true;
            
        // don't block
        } else {
        
            // unset the action function for this column's fields
            unset($this->columnsToShow[$columnName]["action"]);
            
        }
        
    }
    
    /**
     *  Specifies a user defined PHP function that <b>returns</b> the javascript to be run whenever the onclick
     *  event occurs on <b>any</b> field of <b>any</b> row
     *
     *  After calling this method you can still set specific actions for individual column fields by calling the
     *  {@link setActionFunction} method.
     *
     *  <i>The user defined function takes as parameter the value of the field where the onclick event occured and,
     *  optionally, an array containing all the available fields and their respective values for that particular row</i>
     *
     *  @param  string  $actionFunctionName     name of the user defined function
     *
     *  @return void
     */
    function setRowActionFunction($actionFunctionName)
    {
    
        // iterate through available columns
        foreach ($this->columnsToShow as $columnName=>$properties) {
        
            // if column is not blocked (see unsetActionFunction)
            if (!isset($this->columnsToShow[$columnName]["blockAction"])) {
            
                // set the action function for all the columns to show
                $this->columnsToShow[$columnName]["action"] = $actionFunctionName;
                
            }
            
        }
        
    }
    
    /**
     *  Sets a callback function to be run on each value of a specific column before displaying it
     *
     *  <i>The user defined function takes as parameter the value of the field where the onclick event occured and,
     *  optionally, an array containing all the available fields and their respective values for that particular row</i>
     *
     *  @param  string  $columnName             identifier name of a column previously set with the {@link show} or
     *                                          {@link showCustomColumn} method to which to add the callback function to
     *
     *  @param  string  $callbackFunctionName   name of the user defined function
     *
     *  @return void
     */
    function setCallBackFunction($columnName, $callbackFunctionName)
    {
    
        // set the callback function for this column
        $this->columnsToShow[$columnName]["callback"] = $callbackFunctionName;
        
    }
    
    /**
     * Sets a callback Method to be run on each value of a specific column before displaying it
     *
     * @param string $columnName
     * @param Pointer of class $CallbackPointer
     * @param string $CallBackClassName
     * @param string $callbackFunctionName
     */
    function setCallBackMethod($columnName, $CallbackPointer , $CallBackClassName ,$callbackFunctionName)
    {
    	if(method_exists($CallBackClassName,$callbackFunctionName))
    	{
    		// set the callback function for this column
        	$this->columnsToShow[$columnName]["Method"]["Pointer"] = $CallbackPointer;
        	$this->columnsToShow[$columnName]["Method"]["Function"] = $callbackFunctionName;
    	}
        
    }
    
    /**
     *  Sets the HTML code to be displayed before the rendering of the table but INSIDE the form
     */
    function setHeaderHTML($html)
    {
        $this->headerHTML = $html;
    }
    
    /**
     *  Sets the HTML code to be displayed after the rendering of the table but INSIDE the form
     */
    function setFooterHTML($html)
    {
        $this->footerHTML = $html;
    }

    /**
     *  Ads an user-defined javascript code block (javascript function or stand-alone commands) that will be outputted
     *  with the grid and that can be called by the grid's methods
     *
     *  <b>Do not specify <script></script> headers as they will be automatically added!</b>
     *
     *  You can call this method as many times as you want. Previously set code will not be overwritten
     */
    function addJavaScript($script)
    {
        $this->javaScriptCode .= $script."\n\n";
    }

     /**
     *  set row for download Excel
     */
    function downloadExcel($TitelExcel='دريافت گزارش به صورت فايل اکسل')
    {
        $this->ExcelView = true;
        $this->TitelExcel=$TitelExcel;
    }
    
    /**
     *  Outputs the grid
     *
     *  @param  boolean     $returnOutput   if set to true, generated content will be returned instead of being outputed
     *                                      to the screen
     *
     *  @return boolean     TRUE on success or FALSE on failure
     */
    function render($returnOutput=true)
    {
    	
        // before anything, remove from the columnsToShow array the values that are not supposed to be there
        // (i.e. a column that was never set through the show or the showCustomColumn methods but has a
        //  callback function or other properties set)
        foreach ($this->columnsToShow as $originalName=>$column) {
            if (!isset($column["name"])) {
                unset($this->columnsToShow[$originalName]);
            }
        }

        // the number of records to be shown on one page
        if (isset($_POST["dataGrid_recordsOnPage"])) {
            $this->rowsOnPage = $_POST["dataGrid_recordsOnPage"];
        }

        // get the current page
        $this->currentPage = isset($_POST["dataGrid_page"]) ? $_POST["dataGrid_page"] : $this->defaultPage;
        
        // get the field to sort by
        $this->sortField = isset($_POST["dataGrid_sortfield"]) ? $_POST["dataGrid_sortfield"] : "";
        
        // get the direction of sorting
        $this->sortDirection = isset($_POST["dataGrid_sortdirection"]) ? $_POST["dataGrid_sortdirection"] : "";
        
        // if current page is smaller than 1
        if ($this->currentPage < 1) {
            // set the current page to 1
            $this->currentPage = 1;
        }
        
        // if the data needs to be sorted
        if ($this->sortField != "") {
            $this->query .= "
                ORDER BY `".$this->sortField."`".(strtolower($this->sortDirection) == "desc" ? " DESC" : "");
        }
        
        // add the LIMIT statement to the query
        $this->query .= "
            LIMIT ".(($this->currentPage - 1) * $this->rowsOnPage).", ".$this->rowsOnPage."
        ";

        // execute the query
        // if there is a refference to a "database" object
        if (isset($this->dbRefference)) {
            $this->query = preg_replace("/SELECT/i", "SELECT SQL_CALC_FOUND_ROWS", $this->query, 1);
            // execute the query through the "database" object
            $this->queryResult = $this->dbRefference->query($this->query);
            /*// get the total number of records in the result (ignoring the LIMIT)
            $this->totalRecords = $this->dbRefference->num_rows($this->queryResult);*/

            // get the total number of records in the result (ignoring the LIMIT)
            $foundRows = $this->dbRefference->fetch_array($this->dbRefference->query("SELECT FOUND_ROWS()") , MYSQLI_ASSOC);
            $this->totalRecords = $foundRows["FOUND_ROWS()"];

        // if there is no refference to a "database" object then
        // assume that there is a connection to a database
        } else {

            // if SQL_CALC_FOUND_ROWS string is not found in query append it
            // (we do this trick to get the numbers of records that would've been returned if there was no LIMIT applied)
            if (strtolower(substr(ltrim($this->query), 0, 6)) == "select" && strpos($this->query, "SQL_CALC_FOUND_ROWS") === false) {
                // add the 'SQL_CALC_FOUND_ROWS' parameter to the query
                $this->query = preg_replace("/SELECT/i", "SELECT SQL_CALC_FOUND_ROWS", $this->query, 1);
            }
            
            // execute the query using standard php function
            $this->queryResult = mysql_query($this->query)or
                die(mysql_error()."<br /><br />".( $this->ShowSqlError ? $this->query : ""));
            // get the total number of records in the result (ignoring the LIMIT)
            $foundRows = mysql_fetch_assoc(mysql_query("SELECT FOUND_ROWS()"));
            $this->totalRecords = $foundRows["FOUND_ROWS()"];

        }

        // continue only if query returned a valid result
        if ($this->queryResult instanceof mysqli_result) {

            // if the xtemplate class is not already included
            if (!class_exists("XTemplate")) {
            
                // if the file exists
                if (file_exists($this->absolutePath."/includes/class.xtemplate.php")) {
                
                    // include the xtemplate class
                    require_once $this->absolutePath."/includes/class.xtemplate.php";
                    
                // if the file does not exists
                } else {
                
                    // save the error level and stop the execution of the script
                    $this->error = 3;
                    return false;
                    
                }
                
            }
            
            // create a new XTemplate object using the specified template
            $xtpl = new XTemplate($this->absolutePath."/templates/".$this->template."/template.xtpl");
			
            //add row for download Excel this query
            if($this->ExcelView)
			{
            	$xtpl->assign("totalColspan", count($this->columnsToShow));
            	$xtpl->assign("TitelExcel", $this->TitelExcel);
            	$xtpl->assign("formName", $this->formName);
            	$xtpl->parse("main.top_ViewExcel");
			}
			
            // assign some values to be used in the template
            // the number of total records
            $xtpl->assign("ExtraInput", $this->ExtraInput);
            $xtpl->assign("totalRecords", $this->totalRecords);
            $showRecordsFrom = (($this->currentPage - 1) * $this->rowsOnPage) + 1;
            // showing records from
            $xtpl->assign("showingRecordsFrom", $showRecordsFrom);
            $showRecordsTo = (($this->currentPage - 1) * $this->rowsOnPage) + $this->rowsOnPage;
            if ($showRecordsTo > $this->totalRecords) {
                $showRecordsTo = $this->totalRecords;
            }
            // showing records to
            $xtpl->assign("showingRecordsTo", $showRecordsTo);
            
            // create the options for the "records on page" select
            $options = "";
            for ($i = 0; $i < count($this->recordsOnPageArray); $i++) {
                $options .= "<option value='".$this->recordsOnPageArray[$i]."' ".($this->rowsOnPage == $this->recordsOnPageArray[$i] ? "selected" : "").">".$this->recordsOnPageArray[$i]."</option>";
            }
            $xtpl->assign("options", $options);

            // if we have custom javascript code to show
            if (isset($this->javaScriptCode)) {
                $xtpl->assign("javaScript", $this->javaScriptCode);
            }
            
            // if we have cutom HTML at header
            if (isset($this->headerHTML)) {
            	
            	$xtpl->assign("totalColspan", count($this->columnsToShow));
            	$xtpl->assign("HTML", $this->headerHTML);
            	$xtpl->assign("formName", $this->formName);
            	$xtpl->parse("main.headerHTML");
            	
              /*  $xtpl->assign("HTML", $this->headerHTML);
                $xtpl->parse("main.headerHTML");*/
            }
            
            // if we have cutom HTML at footer
            if (isset($this->footerHTML)) {
                $xtpl->assign("HTML", $this->footerHTML);
                $xtpl->parse("main.footerHTML");
            }

            // assign relative path to the template folder ()
            // any HTML refferences (to scripts, stylesheets) in the template file should rely on this
            $xtpl->assign("templatePath", $this->relativePath."/templates/".$this->template."/");

            // assign all the values from the language file
            $xtpl->assign("languageStrings", $this->languageStrings);

            $xtpl->assign("formName", $this->formName);

            if(isset($_SERVER["URL"]))
            	$xtpl->assign("formAction", $_SERVER["URL"]);

            // compute the total number of pages
            $this->totalPages = ceil($this->totalRecords / $this->rowsOnPage);
            $xtpl->assign("totalPages", $this->totalPages);
            
            // get the column titles in the query result
            while ($column = $this->dbRefference->fetch_field($this->queryResult)) {
                // and save them to the designated array
                $this->availableColumns[] = $column->name;
            }
            
            // colspan
            $xtpl->assign("totalColspan", count($this->columnsToShow));
            
            // if a navigation bar is to be displayed at the top or on the bottom of the table
            if ($this->showTopNavigation || $this->showBottomNavigation) {
            
                // if there are more pages than the number of pages to be displayed at once in the navigation tab
                if ($this->totalPages > $this->maxNavigationPages) {
                    // set the page number from which to show the page numbers in the navigation tab
                    $maxNavigationPagesFrom =
                        $this->currentPage < $this->scrollNavigationPagesFromPage ?
                        1 :
                        (($this->currentPage - $this->scrollNavigationPagesFromPage + 1) + $this->maxNavigationPages < $this->totalPages ?
                            ($this->currentPage - $this->scrollNavigationPagesFromPage + 1) :
                            ($this->totalPages - $this->maxNavigationPages));
                // if there are less pages than the number of pages to be displayed at once in the navigation tab
                } else {
                    // set to 1 the page number from which to show the page numbers in the navigation tab
                    $maxNavigationPagesFrom = 1;
                }

                // compute the maximum page number to be shown in the navigation tab
                $showPageTo =
                    $maxNavigationPagesFrom + $this->maxNavigationPages > $this->totalPages ?
                    $this->totalPages :
                    ($maxNavigationPagesFrom + $this->maxNavigationPages);
                    
                // if current page number is greater than 1
                if ($this->currentPage > 1) {
                    // enable the "previous page" button
                    // on the top navigation bar
                    if ($this->showTopNavigation) {
                        $xtpl->parse("main.top_navigation.previous_page_link");
                    }
                    // on the bottom navigation bar
                    if ($this->showBottomNavigation) {
                        $xtpl->parse("main.bottom_navigation.previous_page_link");
                    }
                // if current page is 1
                } else {
                    // disable the "previous page" button
                    // on the top navigation bar
                    if ($this->showTopNavigation) {
                        $xtpl->parse("main.top_navigation.previous_page_link_disabled");
                    }
                    // on the bottom navigation bar
                    if ($this->showBottomNavigation) {
                        $xtpl->parse("main.bottom_navigation.previous_page_link_disabled");
                    }
                }

                // show page numbers in the navigation tab
                for ($i = $maxNavigationPagesFrom; $i <= $showPageTo; $i++) {

                    $xtpl->assign("page", $i);
                    // if the page number currently to be displayed is the current page
                    if ($i == $this->currentPage) {
                        // parse accordingly
                        // on the top navigation bar
                        if ($this->showTopNavigation) {
                            $xtpl->parse("main.top_navigation.item.selected");
                        }
                        // on the bottom navigation bar
                        if ($this->showBottomNavigation) {
                            $xtpl->parse("main.bottom_navigation.item.selected");
                        }
                    // if the page number currently to be displayed is not the current page
                    } else {
                        // parse accordingly
                        // on the top navigation bar
                        if ($this->showTopNavigation) {
                            $xtpl->parse("main.top_navigation.item.selectable");
                        }
                        // on the bottom navigation bar
                        if ($this->showBottomNavigation) {
                            $xtpl->parse("main.bottom_navigation.item.selectable");
                        }
                    }
                    // wraps up page number display
                    // on the top navigation bar
                    if ($this->showTopNavigation) {
                        $xtpl->parse("main.top_navigation.item");
                    }
                    // on the bottom navigation bar
                    if ($this->showBottomNavigation) {
                        $xtpl->parse("main.bottom_navigation.item");
                    }
                }

                // if current page number is less than the total available pages
                if ($this->currentPage < $this->totalPages) {
                    // enable the "next page" button
                    // on the top navigation bar
                    if ($this->showTopNavigation) {
                        $xtpl->parse("main.top_navigation.next_page_link");
                    }
                    // on the bottom navigation bar
                    if ($this->showBottomNavigation) {
                        $xtpl->parse("main.bottom_navigation.next_page_link");
                    }
                // if current page number is equal total available pages
                } else {
                    // disable the "next page" button
                    // on the top navigation bar
                    if ($this->showTopNavigation) {
                        $xtpl->parse("main.top_navigation.next_page_link_disabled");
                    }
                    // on the bottom navigation bar
                    if ($this->showBottomNavigation) {
                        $xtpl->parse("main.bottom_navigation.next_page_link_disabled");
                    }
                }
                
                // wraps up navigation tab display
                // on top
                if ($this->showTopNavigation) {
                    $xtpl->parse("main.top_navigation");
                }
                // and on the bottom
                if ($this->showBottomNavigation) {
                    $xtpl->parse("main.bottom_navigation");
                }

            }

            // show column titles
            // iterates through columns to display
            foreach ($this->columnsToShow as $originalName=>$column) {
            	//check that colomn is _Row_Number_Of_Page and must show it ?
            	if(($originalName=='_Row_Number_Of_Page' && $this->showRowNumber) || $originalName!='_Row_Number_Of_Page'){
	                // create the action for the onlick event
	                $xtpl->assign("originalName", $originalName);
	                $xtpl->assign("column", $column["name"]);
	
	                // if there are special properties for this column's title
	                if (isset($column["titleHTMLProperties"])) {
	                    $xtpl->assign("titleHTMLProperties", $column["titleHTMLProperties"]);
	                } else {
	                    $xtpl->assign("titleHTMLProperties", "");
	                }
	
	                // if sorting is not set to "disabled"
	                if (
	                    !isset($column["disableSorting"]) ||
	                    (
	                        isset($column["disableSorting"]) &&
	                        !$column["disableSorting"]
	                    )
	                ) {
	                    // if the data is sorted by this field
	                    if ($this->sortField == $originalName) {
	                        // if the sort direction is ascending
	                        if ($this->sortDirection == "") {
	                            // show the ascending image
	                            $xtpl->parse("main.column.title.sorted_asc");
	                        // if the sort direction is descending
	                        } else {
	                            // show the descending image
	                            $xtpl->parse("main.column.title.sorted_desc");
	                        }
	                    }
	                    // parse as sortable
	                    $xtpl->parse("main.column.title.sortable");
	                // if sorting is disabled
	                } else {
	                    // parse as not sortable
	                    $xtpl->parse("main.column.title.not_sortable");
	                }
	
	                // wraps up column title display
	                $xtpl->parse("main.column.title");
            	}   
            }
            
            // wraps up column header display
            $xtpl->parse("main.column");

            $counter = 0;

            // iterates through all the rows in the query result
            while ($row = mysqli_fetch_assoc($this->queryResult)) {

                $counter++;
				$ChechkedRow=-1;
                // iterates through the fields in the row
                foreach ($this->columnsToShow as $field=>$properties) {
                	if(($field=='_Row_Number_Of_Page' && $this->showRowNumber) || $field!='_Row_Number_Of_Page'){
	                	
                		if($ChechkedRow==-1){
	                		$Css_Class='';
	                		if(function_exists($this->RowStyleClassFunction)){
	                			 eval('$Css_Class='.$this->RowStyleClassFunction.'($row);');
	                			 
	                		}
                			$ChechkedRow=$counter;
	                		if($Css_Class!=''){
	                			$xtpl->assign("STYLE_CLASS", $Css_Class);
	                		}else {
			                    // if we're on an even row
			                    if ($counter % 2 == 0) {
			                        // parse the field accordingly
			                        $xtpl->assign("STYLE_CLASS", 'grid-row-even');
			                    // if we're on an odd row
			                    } else {
			                        // parse the field accordingly
			                        $xtpl->assign("STYLE_CLASS", 'grid-row-odd');
			                    }
	                		}
                		}
                			                
	                    // if it's a custom field we're talking about
	                    if (isset($properties["custom"])) {
	                        $row[$field] = "";
	                    }
	
	                                       
	                    // if there is a callback function specified for records in current column and function exists
	                    if (
	                        isset($this->columnsToShow[$field]["callback"]) &&
	                        $this->columnsToShow[$field]["callback"] != "" &&
	                        function_exists($this->columnsToShow[$field]["callback"])
	                    ) {
	                        // run the callback function on the current value
	                        eval("\$value = ".$this->columnsToShow[$field]["callback"]."('".addslashes($row[$field])."', \$row);");
	                    } 
	                    elseif(isset($this->columnsToShow[$field]["Method"]))
	                    {
	                    	$Pointer=$this->columnsToShow[$field]["Method"]['Pointer'];
	                    	$Functtion=$this->columnsToShow[$field]["Method"]['Function'];
	                    	eval("\$value = \$Pointer"."->"."$Functtion('".addslashes($row[$field])."', \$row);");
	                    }
	                    else 
	                    {
	                        $value = isset($row[$field]) ? $row[$field] : '' ;
	                    }
	                    
	                    if(is_null($value))
	                    	$value='&nbsp;';
	                    //if field name is _Row_Number_Of_Page change it
	                    if($field=='_Row_Number_Of_Page')
	                    	$value=$counter+$showRecordsFrom-1;
	                    $xtpl->assign("value", $value);
	
	                    // if there is an action function specified for records in current column
	                    if (isset($this->columnsToShow[$field]["action"]) && $this->columnsToShow[$field]["action"] != "") {
	                        // run the callback function on the current value
	                        eval("\$action = ".$this->columnsToShow[$field]["action"]."('".addslashes($row[$field])."', \$row);");
	                    } else {
	                        $action = "";
	                    }
	                    $xtpl->assign("action", $action);
	
	                    // if there are special properties for this column's fields
	                    if (isset($this->columnsToShow[$field]["fieldHTMLProperties"])) {
	                        $xtpl->assign("fieldHTMLProperties", $this->columnsToShow[$field]["fieldHTMLProperties"]);
	                    // if no special properties
	                    } else {
	                        // we empty fieldHTMLProperties or else it will have any previously set fieldHTMLProperties
	                        $xtpl->assign("fieldHTMLProperties", "");
	                    }
	
	                    // if we're on an even row
	                    if ($counter % 2 == 0) {
	                        // parse the field accordingly
	                        $xtpl->parse("main.row.even_row.field");
	                    // if we're on an odd row
	                    } else {
	                        // parse the field accordingly
	                        $xtpl->parse("main.row.odd_row.field");
	                    }
                	}    
                }
                
                // if we're on an even row
                if ($counter % 2 == 0) {
                    // parse the row accordingly
                    $xtpl->parse("main.row.even_row");
                // if we're on an odd row
                } else {
                    // parse the row accordingly
                    $xtpl->parse("main.row.odd_row");
                }
                
                // wraps up row display
                $xtpl->parse("main.row");
                
            }

            // if top and/or bottom custom tabs are to be shown and there are elements to be shown in the custom tab
            if (
                ($this->showTopCustomTab || $this->showBottomCustomTab) &&
                isset($this->customTabItems) &&
                is_array($this->customTabItems) &&
                !empty($this->customTabItems)
            ) {

                // iterate through the available items
                foreach ($this->customTabItems as $item) {
                
                    // parse items
                    $xtpl->assign("item", $item);

                    // if required
                    if ($this->showTopCustomTab) {
                        // show top custom tab
                        $xtpl->parse("main.top_action_tab.item");
                    }
                    
                    // if required
                    if ($this->showBottomCustomTab) {
                        // show bottom custom tab
                        $xtpl->parse("main.bottom_action_tab.item");
                    }

                }

                // wrap up custom tab display
                // if required
                if ($this->showTopCustomTab) {
                    // top custom tab
                    $xtpl->parse("main.top_action_tab");
                }

                // if required
                if ($this->showBottomCustomTab) {
                    // bottom custom tab
                    $xtpl->parse("main.bottom_action_tab");
                }

            }

            // wraps up the grid
            $xtpl->parse("main");
            
            // if output is not to be printed on screen
            // but returned instead
            if ($returnOutput) {
                // return generated content
                return $xtpl->out("main", 1);
            // if output is to be printed on the screen
            } else {
                // display
                $xtpl->out("main");
            }

        // if query did not return a valid result
        } else {
            exit('No');
            // save the error level and stop the execution of the script
            $this->error = 1;
            return false;
            
        }
        
    }
    
    /**
     *  Outputs the file of Excel
     *
     *  @param  boolean     $returnOutput   if set to true, generated content will be returned instead of being outputed
     *                                      to the screen
     *
     *  @return boolean     TRUE on success or FALSE on failure
     */
    function CSV_Render()
    {
    	global $sysLanguage;

    	$txt = new convert ( );
		
		$Res=$this->CheckTable($_SESSION['USER'],$_GET['_rp']);
		
		if(mysql_num_rows($Res)>0)
		{
			js_class::alert_close($sysLanguage['_L_FILE_SCN_IS_CREATE']);
			
			exit();
		}
		
		$this->LockTable($_SESSION['USER'],$_GET['_rp']);
        // get the field to sort by
        $this->sortField = isset($_POST["dataGrid_sortfield"]) ? $_POST["dataGrid_sortfield"] : "";
        
        // get the direction of sorting
        $this->sortDirection = isset($_POST["dataGrid_sortdirection"]) ? $_POST["dataGrid_sortdirection"] : "";
        
        // if the data needs to be sorted
        if ($this->sortField != "") 
        {
            $this->query .= "
                ORDER BY `".$this->sortField."`".(strtolower($this->sortDirection) == "desc" ? " DESC" : "");
        }
        
		if (isset($this->dbRefference)) 
		{
			// execute the query through the "database" object
			$this->queryResult = $this->dbRefference->query($this->query);
			// get the total number of records in the result (ignoring the LIMIT)
			$this->totalRecords = $this->dbRefference->num_rows($this->queryResult );
			
			// if there is no refference to a "database" object then
			// assume that there is a connection to a database
		}
		else 
		{
			// if SQL_CALC_FOUND_ROWS string is not found in query append it
			// (we do this trick to get the numbers of records that would've been returned if there was no LIMIT applied)
			if (strtolower(substr(ltrim($this->query), 0, 6)) == "select" && strpos($this->query, "SQL_CALC_FOUND_ROWS") === false) 
			{
				// add the 'SQL_CALC_FOUND_ROWS' parameter to the query
				$this->query = preg_replace("/SELECT/i", "SELECT SQL_CALC_FOUND_ROWS", $this->query, 1);
			}
			// execute the query using standard php function
			$this->queryResult = mysql_query($this->query)or
				die(mysql_error()."<br /><br />".( $this->ShowSqlError ? $this->query : ""));
			// get the total number of records in the result (ignoring the LIMIT)
			$foundRows = mysql_fetch_assoc(mysql_query("SELECT FOUND_ROWS()"));
		}
        //66X-ZZN-62HR
        set_time_limit(150000);
		// header for down
		ob_clean();
		$now_d = !empty($now_d) ? $now_d : '';
		$strFileName="S1m-U$_SESSION[USER]-".$now_d.'.csv';

        header('Content-Encoding: UTF-8');
        header('Content-type: text/csv; charset=UTF-8');
        header("Content-disposition: filename=$strFileName");
        header("Content-type: application/octetstream");
        header("Pragma: no-cache");
        header("Expires: 0");
        echo "\xEF\xBB\xBF";
		$Counter=0;
		// titel row
		foreach ( $this->columnsToShow as $Key=>$Value)
		{
			if(empty($Value['custom']) OR !$Value['custom'])
			{
				$Value['name']=$txt->GetConfirmPersianText($Value['name']);
				//$Value ['name'] = iconv ( "UTF-8", "CP1256", $Value ['name'] );
				echo $Value['name'].';';
			}
		}
		echo "\r\n";
		// row of query
		while ($row=$this->dbRefference->fetch_array($this->queryResult))
		{
			foreach ( $this->columnsToShow as $Key=>$Value)
			{
				$value=!empty($row[$Key]) ? $row[$Key] : "";
				if(empty($Value['custom']) || !$Value['custom'])
				{
						$Pos=!empty($Value["callback"]) ? strpos($Value["callback"],"::") : "";
	                    if($Pos)
	                    {
	                    	list($ClassName,$FunctionName)=explode("::",$Value["callback"]);
	                    }
					
					if (
						isset($Value["callback"]) &&
						$Value["callback"] != "" &&
						function_exists($Value["callback"])
					) 
					{
						// run the callback function on the current value
						eval("\$value = ".$Value["callback"]."('".addslashes($row[$Key])."', \$row);");
					}
					elseif( $Pos &&
							isset($Value["callback"]) &&
							$Value["callback"] != "" &&
							method_exists($ClassName,$FunctionName)
							)
					{
						eval("\$value = ".$Value["callback"]."('".addslashes($row[$Key])."', \$row);");
					}
					
					$value=$txt->GetConfirmPersianText($value);
					//$value = iconv ( "UTF-8", "CP1256", $value );
					$value = str_replace(";", " ", $value );
					echo $value.';';
				}
			}
			echo "\r\n";
		}
		
		$this->UnLockTable($_SESSION['USER'],$_GET['_rp']);
    }
    
    /**
	 * Lock table for download svn report
	 *
	 * @param unknown_type $User
	 * @param unknown_type $_rp
	 */
	function LockTable($User,$_rp)
    {
    	$Time=mktime();
    	
    	$Time+=60;
    	
    	$Sql="INSERT INTO `report_lock` (`MODULE`,`TIME`,`USER`) VALUES ('$_rp',$Time,$User)";
    	
    	mysql_query($Sql);
    }
    
    /**
     * Check Lock table for download svn report
     *
     * @param unknown_type $User
     * @param unknown_type $_rp
     * @return unknown
     */
    function CheckTable($User,$_rp)
    {
    	
    	$Time=mktime();
    	
    	$Sql="DELETE FROM `report_lock` WHERE (TIME < $Time)  ";
    	
    	mysql_query($Sql);
    	
    	$Sql="select * from `report_lock` where `MODULE`='$_rp' AND `USER`=$User";
    	
    	return mysql_query($Sql);
    }
    
    /**
     * UNLock table for download svn report
     *
     * @param unknown_type $User
     * @param unknown_type $_rp
     */
    function UnLockTable($User,$_rp)
    {
    	$Sql="DELETE FROM `report_lock` WHERE (`MODULE`='$_rp' AND `USER`=$User)  ";
    	
    	mysql_query($Sql);
    }
}
?>
